{"version":3,"names":["store","common_vendor","useStore","recordingTime","ref","isRecording","selectedTopic","topics","currentType","computed","state","questions","currentIndex","evaluation","getters","currentQuestion","progress","isFinished","practiceTypes","config","onMounted","utils_recorder","recorder","init","type","value","Object","keys","dataset","selectType","length","dispatch","onTopicChange","_ref","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","event","index","wrap","_callee$","_context","prev","next","detail","stop","_x","apply","arguments","handleRecord","_ref2","_callee2","_yield$utils_recorder","filePath","duration","text","_callee2$","_context2","sent","api_index","api","speechToText","audioPath","start","setInterval","getCurrentTime","wx","createPage","_sfc_main"],"sources":["index.vue","index.vue?type=page"],"sourcesContent":["<template>\r\n  <view class=\"container\">\r\n    <!-- 练习类型选择 -->\r\n    <view class=\"type-selector\">\r\n      <button\r\n        v-for=\"type in practiceTypes\"\r\n        :key=\"type\"\r\n        :class=\"['type-btn', { active: currentType === type }]\"\r\n        @click=\"selectType(type)\"\r\n      >\r\n        {{ type.toUpperCase() }}\r\n      </button>\r\n    </view>\r\n\r\n    <view class=\"topic-card\">\r\n      <picker mode=\"selector\" :range=\"topics\" @change=\"onTopicChange\">\r\n        <view class=\"topic-selector\">\r\n          <text class=\"label\">SELECT TOPIC</text>\r\n          <view class=\"selected-topic\">\r\n            <text class=\"topic-text\">{{ selectedTopic || 'Choose a topic' }}</text>\r\n            <svg class=\"arrow\" viewBox=\"0 0 24 24\">\r\n              <path d=\"M7 10l5 5 5-5z\"/>\r\n            </svg>\r\n          </view>\r\n        </view>\r\n      </picker>\r\n    </view>\r\n\r\n    <!-- 问题展示 -->\r\n    <!-- <view class=\"question-container\" v-if=\"currentQuestion\">\r\n      <text class=\"question-text\">{{ currentQuestion }}</text>\r\n      <text class=\"progress-text\"\r\n        >Question {{ currentIndex + 1 }} of {{ questions.length }}</text\r\n      >\r\n    </view> -->\r\n\r\n    <!-- 录音控制 -->\r\n    <view class=\"recorder-control\">\r\n      <button\r\n        class=\"record-btn\"\r\n        :class=\"{ recording: isRecording }\"\r\n        @click=\"handleRecord\"\r\n      >\r\n        {{ isRecording ? `Recording... ${recordingTime}s` : \"Start\" }}\r\n      </button>\r\n    </view>\r\n\r\n    <!-- 评价结果 -->\r\n    <view class=\"evaluation-result\" v-if=\"evaluation\">\r\n      <text class=\"score\">Score: {{ evaluation.score }}</text>\r\n      <text class=\"feedback\">Feedback: {{ evaluation.feedback }}</text>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport recorder from \"../../utils/recorder.js\";\r\nimport api from \"@/api\";\r\nimport dataset from \"@/static/dataset.json\";\r\nimport config from \"@/config\";\r\n\r\nconst store = useStore();\r\n\r\n// 响应式数据\r\nconst recordingTime = ref(0);\r\nconst isRecording = ref(false);\r\nconst selectedTopic = ref(\"\");\r\nconst topics = ref([]);\r\nlet timer = null;\r\n\r\n// 从 Vuex 获取状态\r\nconst currentType = computed(() => store.state.currentType);\r\nconst questions = computed(() => store.state.questions);\r\nconst currentIndex = computed(() => store.state.currentIndex);\r\nconst evaluation = computed(() => store.state.evaluation);\r\nconst currentQuestion = computed(() => store.getters.currentQuestion);\r\nconst progress = computed(() => store.getters.progress);\r\nconst isFinished = computed(() => store.getters.isFinished);\r\nconst practiceTypes = computed(() => config.practiceTypes);\r\n\r\n// 初始化\r\nonMounted(() => {\r\n  recorder.init();\r\n  const type = \"part1\"; // init with part 1\r\n  topics.value = Object.keys(dataset[type]);\r\n});\r\n\r\n// 方法\r\nconst selectType = (type) => {\r\n  topics.value = Object.keys(dataset[type]);\r\n  if (topics.value.length > 0) {\r\n    store.dispatch(\"initPractice\", {\r\n      type: type,\r\n      questions: null,\r\n    });\r\n  }\r\n};\r\n\r\n// 主题改变时更新问题\r\nconst onTopicChange = async (event) => {\r\n  const index = event.detail.value;\r\n  if (topics.value.length > 0) {\r\n    selectedTopic.value = topics.value[index];\r\n    store.dispatch(\"initPractice\", {\r\n      type: currentType.value,\r\n      questions: dataset[currentType.value][selectedTopic.value],\r\n    });\r\n  }\r\n};\r\n\r\nconst handleRecord = async () => {\r\n  if (isRecording.value) {\r\n    isRecording.value = false;\r\n    const { filePath, duration } = await recorder.stop();\r\n\r\n    // 语音转文字\r\n    const text = await api.speechToText(filePath);\r\n\r\n    // 提交回答\r\n    await store.dispatch(\"submitAnswer\", {\r\n      audioPath: filePath,\r\n      text,\r\n    });\r\n\r\n    // 如果是最后一个问题，提交评价\r\n    if (isFinished.value) {\r\n      await store.dispatch(\"submitEvaluation\");\r\n    }\r\n  } else {\r\n    isRecording.value = true;\r\n    await recorder.start();\r\n    recordingTime.value = 0;\r\n    timer = setInterval(() => {\r\n      recordingTime.value = recorder.getCurrentTime();\r\n    }, 1000);\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.container {\r\n  padding: 20px;\r\n}\r\n\r\n.type-selector {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.type-btn {\r\n  margin: 5px;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  background-color: #f0f0f0;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.type-btn.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.topic-selector {\r\n  margin-top: 15px;\r\n}\r\n\r\n.topic-selector select {\r\n  width: 100%;\r\n  padding: 12px;\r\n  border-radius: 8px;\r\n  border: 1px solid #ddd;\r\n  background-color: white;\r\n  font-size: 16px;\r\n  appearance: none;\r\n  background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007BFF%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E\");\r\n  background-repeat: no-repeat;\r\n  background-position: right 12px center;\r\n  background-size: 12px auto;\r\n  cursor: pointer;\r\n}\r\n\r\n.topic-selector select:focus {\r\n  outline: none;\r\n  border-color: #007bff;\r\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\r\n}\r\n\r\n.question-container {\r\n  margin: 20px 0;\r\n}\r\n\r\n.question-text {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n}\r\n\r\n.progress-text {\r\n  display: block;\r\n  margin-top: 10px;\r\n  color: #666;\r\n}\r\n\r\n.record-btn {\r\n  width: 100%;\r\n  padding: 15px;\r\n  border-radius: 25px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.record-btn.recording {\r\n  background-color: #dc3545;\r\n}\r\n\r\n.evaluation-result {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 5px;\r\n}\r\n\r\n.score {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #28a745;\r\n}\r\n\r\n.feedback {\r\n  display: block;\r\n  margin-top: 10px;\r\n  color: #666;\r\n}\r\n</style>\r\n","import MiniProgramPage from '/Users/weikeshi/Projects/ielts-speaking/frontend/pages/index/index.vue'\nwx.createPage(MiniProgramPage)"],"mappingsaAAA,CAAQC,QAAA;IAGtB,IAAMC,aAAA,GAAgBF,aAAA,CAAAG,GAAA,CAAI,CAAC;IAC3B,IAAMC,WAAA,GAAcJ,aAAA,CAAAG,GAAA,CAAI,KAAK;IAC7B,IAAME,aAAA,GAAgBL,aAAA,CAAAG,GAAA,CAAI,EAAE;IAC5B,IAAMG,MAAA,GAASN,aAAA,CAAAG,GAAA,CAAI,EAAE;IAIrB,IAAMI,WAAA,GAAcP,aAAA,CAAAQ,QAAA,CAAS;MAAA,OAAMT,KAAA,CAAMU,KAAA,CAAMF,WAAW;IAAA;IACxCP,aAAA,CAAAQ,QAAA,CAAS;MAAA,OAAMT,KAAA,CAAMU,KAAA,CAAMC,SAAS;IAAA;IACjCV,aAAA,CAAAQ,QAAA,CAAS;MAAA,OAAMT,KAAA,CAAMU,KAAA,CAAME,YAAY;IAAA;IAC5D,IAAMC,UAAA,GAAaZ,aAAA,CAAAQ,QAAA,CAAS;MAAA,OAAMT,KAAA,CAAMU,KAAA,CAAMG,UAAU;IAAA;IAChCZ,aAAA,CAAAQ,QAAA,CAAS;MAAA,OAAMT,KAAA,CAAMc,OAAA,CAAQC,eAAe;IAAA;IACnDd,aAAA,CAAAQ,QAAA,CAAS;MAAA,OAAMT,KAAA,CAAMc,OAAA,CAAQE,QAAQ;IAAA;IACtD,IAAMC,UAAA,GAAahB,aAAA,CAAAQ,QAAA,CAAS;MAAA,OAAMT,KAAA,CAAMc,OAAA,CAAQG,UAAU;IAAA;IAC1D,IAAMC,aAAA,GAAgBjB,aAAA,CAAQQ,QAAA,CAAC;MAAA,OAAMU,MAAA,CAAMA,MAAA,CAACD,aAAa;IAAA;IAGzDjB,aAAA,CAAAmB,SAAA,CAAU,YAAM;MACdC,cAAA,CAAQC,QAAA,CAACC,IAAA,EAAI;MACb,IAAMC,IAAA,GAAO;MACbjB,MAAA,CAAOkB,KAAA,GAAQC,MAAA,CAAOC,IAAA,CAAKC,OAAA,CAAQJ,IAAI,CAAC;IAC1C,CAAC;IAGD,IAAMK,UAAA,GAAa,SAAbA,WAAcL,IAAA,EAAS;MAC3BjB,MAAA,CAAOkB,KAAA,GAAQC,MAAA,CAAOC,IAAA,CAAKC,OAAA,CAAQJ,IAAI,CAAC;MACxC,IAAIjB,MAAA,CAAOkB,KAAA,CAAMK,MAAA,GAAS,GAAG;QAC3B9B,KAAA,CAAM+B,QAAA,CAAS,gBAAgB;UAC7BP,IAAA,EAAAA,IAAA;UACAb,SAAA,EAAW;QACjB,CAAK;MACF;IACH;IAGA,IAAMqB,aAAA;MAAA,IAAAC,IAAA,GAAAC,kBAAA,eAAAC,oBAAA,GAAAC,IAAA,CAAgB,SAAAC,QAAOC,KAAA;QAAA,IAAAC,KAAA;QAAA,OAAAJ,oBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACrBL,KAAA,GAAQD,KAAA,CAAMO,MAAA,CAAOpB,KAAA;cAC3B,IAAIlB,MAAA,CAAOkB,KAAA,CAAMK,MAAA,GAAS,GAAG;gBAC3BxB,aAAA,CAAcmB,KAAA,GAAQlB,MAAA,CAAOkB,KAAA,CAAMc,KAAK;gBACxCvC,KAAA,CAAM+B,QAAA,CAAS,gBAAgB;kBAC7BP,IAAA,EAAMhB,WAAA,CAAYiB,KAAA;kBAClBd,SAAA,EAAWiB,OAAA,CAAQpB,WAAA,CAAYiB,KAAK,EAAEnB,aAAA,CAAcmB,KAAK;gBAC/D,CAAK;cACF;YAAA;YAAA;cAAA,OAAAiB,QAAA,CAAAI,IAAA;UAAA;QAAA,GAAAT,OAAA;MAAA,CACH;MAAA,gBATML,cAAAe,EAAA;QAAA,OAAAd,IAAA,CAAAe,KAAA,OAAAC,SAAA;MAAA;IAAA,GASN;IAEA,IAAMC,YAAA;MAAA,IAAAC,KAAA,GAAAjB,kBAAA,eAAAC,oBAAA,GAAAC,IAAA,CAAe,SAAAgB,SAAA;QAAA,IAAAC,qBAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAC,IAAA;QAAA,OAAArB,oBAAA,GAAAK,IAAA,UAAAiB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAf,IAAA,GAAAe,SAAA,CAAAd,IAAA;YAAA;cAAA,KACfvC,WAAA,CAAYoB,KAAA;gBAAAiC,SAAA,CAAAd,IAAA;gBAAA;cAAA;cACdvC,WAAA,CAAYoB,KAAA,GAAQ;cAAAiC,SAAA,CAAAd,IAAA;cAAA,OACiBvB,cAAA,CAAQC,QAAA,CAACwB,IAAA,EAAI;YAAA;cAAAO,qBAAA,GAAAK,SAAA,CAAAC,IAAA;cAA1CL,QAAA,GAAAD,qBAAA,CAAAC,QAAA;cAAUC,QAAA,GAAAF,qBAAA,CAAAE,QAAA;cAAAG,SAAA,CAAAd,IAAA;cAAA,OAGCgB,SAAA,CAAAC,GAAA,CAAIC,YAAA,CAAaR,QAAQ;YAAA;cAAtCE,IAAA,GAAAE,SAAA,CAAAC,IAAA;cAAAD,SAAA,CAAAd,IAAA;cAAA,OAGA5C,KAAA,CAAM+B,QAAA,CAAS,gBAAgB;gBACnCgC,SAAA,EAAWT,QAAA;gBACXE,IAAA,EAAAA;cACN,CAAK;YAAA;cAAA,KAGGvC,UAAA,CAAWQ,KAAA;gBAAAiC,SAAA,CAAAd,IAAA;gBAAA;cAAA;cAAAc,SAAA,CAAAd,IAAA;cAAA,OACP5C,KAAA,CAAM+B,QAAA,CAAS,kBAAkB;YAAA;cAAA2B,SAAA,CAAAd,IAAA;cAAA;YAAA;cAGzCvC,WAAA,CAAYoB,KAAA,GAAQ;cAAAiC,SAAA,CAAAd,IAAA;cAAA,OACdvB,cAAA,CAAAC,QAAA,CAAS0C,KAAA;YAAA;cACf7D,aAAA,CAAcsB,KAAA,GAAQ;cACdwC,WAAA,CAAY,YAAM;gBACxB9D,aAAA,CAAcsB,KAAA,GAAQJ,cAAA,CAAAC,QAAA,CAAS4C,cAAA;cAChC,GAAE,GAAI;YAAA;YAAA;cAAA,OAAAR,SAAA,CAAAZ,IAAA;UAAA;QAAA,GAAAM,QAAA;MAAA,CAEX;MAAA,gBA1BMF,aAAA;QAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;MAAA;IAAA,GA0BN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzIAkB,EAAA,CAAGC,UAAA,CAAWC,SAAe","ignoreList":[]}