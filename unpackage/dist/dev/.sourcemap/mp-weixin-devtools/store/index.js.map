{"version":3,"names":["store","common_vendor","createStore","state","currentType","questions","currentIndex","answers","isRecording","evaluation","mutations","SET_TYPE","type","SET_QUESTIONS","NEXT_QUESTION","length","ADD_ANSWER","answer","push","SET_RECORDING","status","SET_EVALUATION","actions","initPractice","_ref","_ref2","commit","submitAnswer","_ref3","_ref4","audioPath","text","question","submitEvaluation","_ref5","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","evaluationData","_yield$common_vendor$","_yield$common_vendor$2","err","res","result","wrap","_callee$","_context","prev","next","index","request","url","config","deepseek","apiUrl","method","header","concat","apiKey","data","sent","_slicedToArray2","Error","stop","getters","currentQuestion","progress","isFinished"],"sources":["index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    // 当前练习类型\n    currentType: '',\n    \n    // 当前练习问题列表\n    questions: [],\n    \n    // 当前问题索引\n    currentIndex: 0,\n    \n    // 用户回答记录\n    answers: [],\n    \n    // 录音状态\n    isRecording: false,\n    \n    // 评价结果\n    evaluation: null\n  },\n  mutations: {\n    SET_TYPE(state, type) {\n      state.currentType = type\n    },\n    SET_QUESTIONS(state, questions) {\n      state.questions = questions\n      state.currentIndex = 0\n      state.answers = []\n    },\n    NEXT_QUESTION(state) {\n      if (state.currentIndex < state.questions.length - 1) {\n        state.currentIndex++\n      }\n    },\n    ADD_ANSWER(state, answer) {\n      state.answers.push(answer)\n    },\n    SET_RECORDING(state, status) {\n      state.isRecording = status\n    },\n    SET_EVALUATION(state, evaluation) {\n      state.evaluation = evaluation\n    }\n  },\n  actions: {\n    // 初始化练习\n    initPractice({ commit }, { type, questions }) {\n      commit('SET_TYPE', type)\n      commit('SET_QUESTIONS', questions)\n    },\n    \n    // 提交回答\n    submitAnswer({ commit, state }, { audioPath, text }) {\n      const answer = {\n        question: state.questions[state.currentIndex],\n        audioPath,\n        text\n      }\n      commit('ADD_ANSWER', answer)\n      commit('NEXT_QUESTION')\n    },\n    \n    // 提交评价\n    async submitEvaluation({ commit, state }) {\n      const evaluationData = {\n        questions: state.questions,\n        answers: state.answers\n      }\n      \n      // 调用Deepseek API\n      const [err, res] = await uni.request({\n        url: config.deepseek.apiUrl,\n        method: 'POST',\n        header: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${config.deepseek.apiKey}`\n        },\n        data: evaluationData\n      })\n      \n      if (err) {\n        throw new Error('Evaluation failed')\n      }\n      \n      const result = res.data\n      commit('SET_EVALUATION', result)\n    }\n  },\n  getters: {\n    currentQuestion: state => state.questions[state.currentIndex],\n    progress: state => (state.currentIndex + 1) / state.questions.length,\n    isFinished: state => state.currentIndex >= state.questions.length\n  }\n})\n"],"mappings":"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","ignoreList":[]}