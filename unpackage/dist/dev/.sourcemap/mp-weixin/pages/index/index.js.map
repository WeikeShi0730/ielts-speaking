{"version":3,"file":"index.js","sources":["pages/index/index.vue","pages/index/index.vue?type=page"],"sourcesContent":["<template>\r\n  <view class=\"container\">\r\n    <!-- 练习类型选择 -->\r\n    <view class=\"type-selector\">\r\n      <button\r\n        v-for=\"type in practiceTypes\"\r\n        :key=\"type\"\r\n        :class=\"['type-btn', { active: currentType === type }]\"\r\n        @click=\"onTypeChange(type)\"\r\n      >\r\n        {{ type.toUpperCase() }}\r\n      </button>\r\n    </view>\r\n\r\n    <view class=\"topic-card\">\r\n      <picker mode=\"selector\" :range=\"topics\" @change=\"onTopicChange\">\r\n        <view class=\"topic-selector\">\r\n          <text class=\"label\">SELECT TOPIC</text>\r\n          <view class=\"selected-topic\">\r\n            <text class=\"topic-text\">{{\r\n              currentTopic || \"Choose a topic\"\r\n            }}</text>\r\n            <svg class=\"arrow\" viewBox=\"0 0 24 24\">\r\n              <path d=\"M7 10l5 5 5-5z\" />\r\n            </svg>\r\n          </view>\r\n        </view>\r\n      </picker>\r\n    </view>\r\n\r\n    <!-- 问题展示 -->\r\n    <view class=\"question-container\" v-if=\"currentQuestion\">\r\n      <text class=\"progress-text\"\r\n        >Question\r\n        {{\r\n          currentIndex + 1 > questions.length ? currentIndex : currentIndex + 1\r\n        }}\r\n        of {{ questions.length }}</text\r\n      >\r\n      <text class=\"question-text\">{{ currentQuestion }}</text>\r\n    </view>\r\n\r\n    <!-- 录音控制 -->\r\n    <view class=\"recorder-control\">\r\n      <button\r\n        class=\"record-btn\"\r\n        :class=\"{ recording: isRecording }\"\r\n        @click=\"handleRecord\"\r\n      >\r\n        {{ isRecording ? `Recording... ${recordingTime}s` : \"Start\" }}\r\n      </button>\r\n    </view>\r\n\r\n    <view class=\"loading-container\" v-if=\"isLoading\">\r\n      <view class=\"loading-spinner\"></view>\r\n      <text class=\"loading-text\">Loading...</text>\r\n    </view>\r\n\r\n    <!-- 评价结果 -->\r\n    <view class=\"evaluation-result\" v-if=\"evaluation\">\r\n      <text class=\"score\">Score: {{ evaluation.score }}</text>\r\n      <text class=\"feedback\">Feedback: {{ evaluation.feedback }}</text>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport recorder from \"../../utils/recorder.js\";\r\nimport api from \"@/api\";\r\nimport dataset from \"@/static/dataset.json\";\r\nimport config from \"@/config\";\r\n\r\nconst store = useStore();\r\n\r\n// 响应式数据\r\nconst recordingTime = ref(0);\r\nconst isRecording = ref(false);\r\nconst selectedTopic = ref(\"\");\r\nconst topics = ref([]);\r\nlet timer = null;\r\n\r\n// 从 Vuex 获取状态\r\nconst currentType = computed(() => store.state.currentType);\r\nconst currentTopic = computed(() => store.state.currentTopic);\r\nconst questions = computed(() => store.state.questions);\r\nconst currentIndex = computed(() => store.state.currentIndex);\r\nconst evaluation = computed(() => store.state.evaluation);\r\nconst isLoading = computed(() => store.state.isLoading);\r\nconst currentQuestion = computed(() => store.getters.currentQuestion);\r\nconst progress = computed(() => store.getters.progress);\r\nconst isFinished = computed(() => store.getters.isFinished);\r\nconst practiceTypes = computed(() => config.practiceTypes);\r\n\r\n// 初始化\r\nonMounted(() => {\r\n  recorder.init();\r\n  const type = \"part1\"; // init with part 1\r\n  topics.value = Object.keys(dataset[type]);\r\n});\r\n\r\n// 方法\r\nconst onTypeChange = (type) => {\r\n  topics.value = Object.keys(dataset[type]);\r\n  if (topics.value.length > 0) {\r\n    store.dispatch(\"setType\", {\r\n      type: type,\r\n    });\r\n  }\r\n};\r\n\r\n// 主题改变时更新问题\r\nconst onTopicChange = async (event) => {\r\n  const index = event.detail.value;\r\n  if (topics.value.length > 0) {\r\n    selectedTopic.value = topics.value[index];\r\n    store.dispatch(\"setType\", {\r\n      type: currentType.value,\r\n    });\r\n    store.dispatch(\"setTopic\", {\r\n      topic: selectedTopic.value,\r\n      questions: Object.values(dataset[currentType.value][selectedTopic.value]),\r\n    });\r\n  }\r\n};\r\n\r\nconst handleRecord = async () => {\r\n  // TODO: when questions are selected\r\n  if (currentQuestion !== null && currentQuestion !== undefined) {\r\n    if (isRecording.value) {\r\n      isRecording.value = false;\r\n      const { filePath, duration } = await recorder.stop();\r\n\r\n      // 语音转文字\r\n      // const text = await api.speechToText(filePath);\r\n      const text = \"I'm Jack, I'm 12 years old\";\r\n\r\n      // 提交回答\r\n      await store.dispatch(\"appendAnswer\", {\r\n        // audioPath: filePath,\r\n        audioPath: \"\",\r\n        answer: text,\r\n      });\r\n\r\n      // 如果是最后一个问题，提交评价\r\n      if (isFinished.value) {\r\n        await store.dispatch(\"submitQAs\");\r\n      }\r\n    } else {\r\n      isRecording.value = true;\r\n      await recorder.start();\r\n      recordingTime.value = 0;\r\n      timer = setInterval(() => {\r\n        recordingTime.value = recorder.getCurrentTime();\r\n      }, 1000);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.container {\r\n  padding: 20px;\r\n}\r\n\r\n.type-selector {\r\n  background: white;\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n  margin: 20px 0;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.type-btn {\r\n  margin: 4px;\r\n  padding: 12px 24px;\r\n  border-radius: 12px;\r\n  background: linear-gradient(145deg, #f6f8fa, #ffffff);\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #666;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.type-btn:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.type-btn.active {\r\n  background: linear-gradient(145deg, #007bff, #0069d9);\r\n  color: white;\r\n  border-color: transparent;\r\n  box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);\r\n}\r\n\r\n.topic-card {\r\n  background: linear-gradient(135deg, #f6f8fa, #ffffff);\r\n  border-radius: 16px;\r\n  padding: 24px;\r\n  margin: 20px 0;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.topic-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.topic-selector {\r\n  cursor: pointer;\r\n}\r\n\r\n.label {\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  color: #666;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.selected-topic {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.topic-text {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #333;\r\n}\r\n\r\n.topic-text:empty::before {\r\n  content: \"Choose a topic\";\r\n  color: #999;\r\n}\r\n\r\n.arrow {\r\n  width: 16px;\r\n  height: 16px;\r\n  fill: #666;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.topic-selector:active .arrow {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.question-container {\r\n  background: linear-gradient(145deg, #ffffff, #f6f8fa);\r\n  border-radius: 16px;\r\n  padding: 24px;\r\n  margin: 20px 0;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.question-container:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.question-text {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #333;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.progress-text {\r\n  display: block;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #666;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.record-btn {\r\n  width: 100%;\r\n  padding: 15px;\r\n  border-radius: 25px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.record-btn.recording {\r\n  background-color: #dc3545;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 20px;\r\n  margin: 20px 0;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #007bff;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 12px;\r\n  font-size: 14px;\r\n  color: #666;\r\n  font-weight: 500;\r\n}\r\n\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.evaluation-result {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 5px;\r\n}\r\n\r\n.score {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #28a745;\r\n}\r\n\r\n.feedback {\r\n  display: block;\r\n  margin-top: 10px;\r\n  color: #666;\r\n}\r\n</style>\r\n","import MiniProgramPage from '/Users/weikeshi/Projects/ielts-speaking/frontend/pages/index/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["useStore","ref","computed","config","onMounted","recorder","MiniProgramPage"],"mappingscAAQ,SAAA;AAGtB,UAAM,gBAAgBC,cAAAA,IAAI,CAAC;AAC3B,UAAM,cAAcA,cAAAA,IAAI,KAAK;AAC7B,UAAM,gBAAgBA,cAAAA,IAAI,EAAE;AAC5B,UAAM,SAASA,cAAAA,IAAI,CAAA,CAAE;AAIrB,UAAM,cAAcC,cAAAA,SAAS,MAAM,MAAM,MAAM,WAAW;AAC1D,UAAM,eAAeA,cAAAA,SAAS,MAAM,MAAM,MAAM,YAAY;AAC5D,UAAM,YAAYA,cAAAA,SAAS,MAAM,MAAM,MAAM,SAAS;AACtD,UAAM,eAAeA,cAAAA,SAAS,MAAM,MAAM,MAAM,YAAY;AAC5D,UAAM,aAAaA,cAAAA,SAAS,MAAM,MAAM,MAAM,UAAU;AACxD,UAAM,YAAYA,cAAAA,SAAS,MAAM,MAAM,MAAM,SAAS;AACtD,UAAM,kBAAkBA,cAAAA,SAAS,MAAM,MAAM,QAAQ,eAAe;AACnDA,kBAAAA,SAAS,MAAM,MAAM,QAAQ,QAAQ;AACtD,UAAM,aAAaA,cAAAA,SAAS,MAAM,MAAM,QAAQ,UAAU;AAC1D,UAAM,gBAAgBA,cAAQ,SAAC,MAAMC,OAAM,OAAC,aAAa;AAGzDC,kBAAAA,UAAU,MAAM;AACdC,qBAAQ,SAAC,KAAI;AACb,YAAM,OAAO;AACb,aAAO,QAAQ,OAAO,KAAK,QAAQ,IAAI,CAAC;AAAA,IAC1C,CAAC;AAGD,UAAM,eAAe,CAAC,SAAS;AAC7B,aAAO,QAAQ,OAAO,KAAK,QAAQ,IAAI,CAAC;AACxC,UAAI,OAAO,MAAM,SAAS,GAAG;AAC3B,cAAM,SAAS,WAAW;AAAA,UACxB;AAAA,QACN,CAAK;AAAA,MACF;AAAA,IACH;AAGA,UAAM,gBAAgB,OAAO,UAAU;AACrC,YAAM,QAAQ,MAAM,OAAO;AAC3B,UAAI,OAAO,MAAM,SAAS,GAAG;AAC3B,sBAAc,QAAQ,OAAO,MAAM,KAAK;AACxC,cAAM,SAAS,WAAW;AAAA,UACxB,MAAM,YAAY;AAAA,QACxB,CAAK;AACD,cAAM,SAAS,YAAY;AAAA,UACzB,OAAO,cAAc;AAAA,UACrB,WAAW,OAAO,OAAO,QAAQ,YAAY,KAAK,EAAE,cAAc,KAAK,CAAC;AAAA,QAC9E,CAAK;AAAA,MACF;AAAA,IACH;AAEA,UAAM,eAAe,YAAY;AAE/B,UAAI,oBAAoB,QAAQ,oBAAoB,QAAW;AAC7D,YAAI,YAAY,OAAO;AACrB,sBAAY,QAAQ;AACW,gBAAMA,eAAAA,SAAS,KAAO;AAIrD,gBAAM,OAAO;AAGb,gBAAM,MAAM,SAAS,gBAAgB;AAAA;AAAA,YAEnC,WAAW;AAAA,YACX,QAAQ;AAAA,UAChB,CAAO;AAGD,cAAI,WAAW,OAAO;AACpB,kBAAM,MAAM,SAAS,WAAW;AAAA,UACjC;AAAA,QACP,OAAW;AACL,sBAAY,QAAQ;AACpB,gBAAMA,eAAAA,SAAS;AACf,wBAAc,QAAQ;AACd,sBAAY,MAAM;AACxB,0BAAc,QAAQA,wBAAS;UAChC,GAAE,GAAI;AAAA,QACR;AAAA,MACF;AAAA,IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7JA,GAAG,WAAWC,SAAe;"}