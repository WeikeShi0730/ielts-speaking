{"version":3,"file":"index.js","sources":["store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    // 当前练习类型\n    currentType: '',\n    \n    // 当前练习问题列表\n    questions: [],\n    \n    // 当前问题索引\n    currentIndex: 0,\n    \n    // 用户回答记录\n    answers: [],\n    \n    // 录音状态\n    isRecording: false,\n    \n    // 评价结果\n    evaluation: null\n  },\n  mutations: {\n    SET_TYPE(state, type) {\n      state.currentType = type\n    },\n    SET_QUESTIONS(state, questions) {\n      state.questions = questions\n      state.currentIndex = 0\n      state.answers = []\n    },\n    NEXT_QUESTION(state) {\n      if (state.currentIndex < state.questions.length - 1) {\n        state.currentIndex++\n      }\n    },\n    ADD_ANSWER(state, answer) {\n      state.answers.push(answer)\n    },\n    SET_RECORDING(state, status) {\n      state.isRecording = status\n    },\n    SET_EVALUATION(state, evaluation) {\n      state.evaluation = evaluation\n    }\n  },\n  actions: {\n    // 初始化练习\n    initPractice({ commit }, { type, questions }) {\n      commit('SET_TYPE', type)\n      commit('SET_QUESTIONS', questions)\n    },\n    \n    // 提交回答\n    submitAnswer({ commit, state }, { audioPath, text }) {\n      const answer = {\n        question: state.questions[state.currentIndex],\n        audioPath,\n        text\n      }\n      commit('ADD_ANSWER', answer)\n      commit('NEXT_QUESTION')\n    },\n    \n    // 提交评价\n    async submitEvaluation({ commit, state }) {\n      const evaluationData = {\n        questions: state.questions,\n        answers: state.answers\n      }\n      \n      // 调用Deepseek API\n      const [err, res] = await uni.request({\n        url: config.deepseek.apiUrl,\n        method: 'POST',\n        header: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${config.deepseek.apiKey}`\n        },\n        data: evaluationData\n      })\n      \n      if (err) {\n        throw new Error('Evaluation failed')\n      }\n      \n      const result = res.data\n      commit('SET_EVALUATION', result)\n    }\n  },\n  getters: {\n    currentQuestion: state => state.questions[state.currentIndex],\n    progress: state => (state.currentIndex + 1) / state.questions.length,\n    isFinished: state => state.currentIndex >= state.questions.length\n  }\n})\n"],"names":["createStore","uni"],"mappings":";;AAEA,MAAA,QAAeA,0BAAY;AAAA,EACzB,OAAO;AAAA;AAAA,IAEL,aAAa;AAAA;AAAA,IAGb,WAAW,CAAE;AAAA;AAAA,IAGb,cAAc;AAAA;AAAA,IAGd,SAAS,CAAE;AAAA;AAAA,IAGX,aAAa;AAAA;AAAA,IAGb,YAAY;AAAA,EACb;AAAA,EACD,WAAW;AAAA,IACT,SAAS,OAAO,MAAM;AACpB,YAAM,cAAc;AAAA,IACrB;AAAA,IACD,cAAc,OAAO,WAAW;AAC9B,YAAM,YAAY;AAClB,YAAM,eAAe;AACrB,YAAM,UAAU,CAAE;AAAA,IACnB;AAAA,IACD,cAAc,OAAO;AACnB,UAAI,MAAM,eAAe,MAAM,UAAU,SAAS,GAAG;AACnD,cAAM;AAAA,MACP;AAAA,IACF;AAAA,IACD,WAAW,OAAO,QAAQ;AACxB,YAAM,QAAQ,KAAK,MAAM;AAAA,IAC1B;AAAA,IACD,cAAc,OAAO,QAAQ;AAC3B,YAAM,cAAc;AAAA,IACrB;AAAA,IACD,eAAe,OAAO,YAAY;AAChC,YAAM,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EACD,SAAS;AAAA;AAAA,IAEP,aAAa,EAAE,OAAM,GAAI,EAAE,MAAM,UAAS,GAAI;AAC5C,aAAO,YAAY,IAAI;AACvB,aAAO,iBAAiB,SAAS;AAAA,IAClC;AAAA;AAAA,IAGD,aAAa,EAAE,QAAQ,MAAO,GAAE,EAAE,WAAW,QAAQ;AACnD,YAAM,SAAS;AAAA,QACb,UAAU,MAAM,UAAU,MAAM,YAAY;AAAA,QAC5C;AAAA,QACA;AAAA,MACD;AACD,aAAO,cAAc,MAAM;AAC3B,aAAO,eAAe;AAAA,IACvB;AAAA;AAAA,IAGD,MAAM,iBAAiB,EAAE,QAAQ,SAAS;AACxC,YAAM,iBAAiB;AAAA,QACrB,WAAW,MAAM;AAAA,QACjB,SAAS,MAAM;AAAA,MAChB;AAGD,YAAM,CAAC,KAAK,GAAG,IAAI,MAAMC,cAAAA,MAAI,QAAQ;AAAA,QACnC,KAAK,OAAO,SAAS;AAAA,QACrB,QAAQ;AAAA,QACR,QAAQ;AAAA,UACN,gBAAgB;AAAA,UAChB,iBAAiB,UAAU,OAAO,SAAS,MAAM;AAAA,QAClD;AAAA,QACD,MAAM;AAAA,MACd,CAAO;AAED,UAAI,KAAK;AACP,cAAM,IAAI,MAAM,mBAAmB;AAAA,MACpC;AAED,YAAM,SAAS,IAAI;AACnB,aAAO,kBAAkB,MAAM;AAAA,IAChC;AAAA,EACF;AAAA,EACD,SAAS;AAAA,IACP,iBAAiB,WAAS,MAAM,UAAU,MAAM,YAAY;AAAA,IAC5D,UAAU,YAAU,MAAM,eAAe,KAAK,MAAM,UAAU;AAAA,IAC9D,YAAY,WAAS,MAAM,gBAAgB,MAAM,UAAU;AAAA,EAC5D;AACH,CAAC;;"}